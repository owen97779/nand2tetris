// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Help from: https://drive.google.com/file/d/1KND4Luypn6d6rly2YN09qqHwxbteomIy/view
    /* Rename instructions */
    // If last instruction bit is 1, it is C instruction, else it is A instruction
    // Rename control bits
    And16 (a=instruction, b=true, out[0]=cj3, out[1]=cj2, out[2]=cj1,
                                    out[3]=cd3, out[4]=cd2, out[5]=cd1,
                                    out[6]=cc6, out[7]=cc5, out[8]=cc4,
                                    out[9]=cc3, out[10]=cc2, out[11]=cc1,
                                    out[12]=ca);

    /* A register */
    Mux16 (a=outALU, b=instruction, sel=instA, out=inA);
    ARegister (in=inA, load=loadA, out=outA, out[0..14]=addressM);

    /* D register */
    DRegister (in=outALU, load=loadD, out=outD);

    /* AMtoALU */
    Mux16 (a=outA, b=inM, sel=AMtoALU, out=outAM);

    /* ALU */
    ALU (x=outD, y=outAM, zx=cc1, nx=cc2, zy=cc3, ny=cc4, 
        f=cc5, no=cc6, out=outM, out=outALU, zr=zr, ng=ng);

    /* PC */
    PC (in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    /* Decoder */
    //instC logic
    And (a=true, b=instruction[15], out=instC);
    //instA logic
    Not (in=instC, out=instA);
    // loadA logic, load if C instruction with the 5th bit specified or it is an A instruction
    And (a=instC, b=cd1, out=destA);
    Or (a=instA, b=destA, out=loadA);
    // loadD logic
    And (a=cd2, b=instC, out=loadD);
    // loadM logic
    And (a=instC, b=cd3, out=loadM, out=writeM);
    // AMtoALU logoc
    And (a=instC, b=ca, out=AMtoALU);
    // loadPC logic
        // JGT logic (must be positive number)
        Or (a=zr, b=ng, out=zrORng);
        Not (in=zrORng, out=positive);
        And (a=positive, b=cj3, out=JGT);
        // JEQ logic (must be zero)
        And (a=zr, b=cj2, out=JEQ);
        // JLT logic (must be negative)
        And (a=ng, b=cj1, out=JLT);
        // JGE logic 
        Or (a=JEQ, b=JGT, out=JGE);
        // JNE logic
        Or (a=JGT, b=JLT, out=JNE);
        // JLE logic
        Or (a=JLT, b=JEQ, out=JLE);
        // JMP logic
        Or (a=JGT, b=JLE, out=JMP);
        // Apply PC if C instruction
        Or (a=JGT, b=JEQ, out=j1);
        Or (a=JLT, b=j1, out=j2);
        Or (a=JGE, b=j2, out=j3);
        Or (a=JNE, b=j3, out=j4);
        Or (a=JLE, b=j4, out=j5);
        Or (a=JMP, b=j5, out=j6);
        And (a=instC, b=j6, out=loadPC);

    
}