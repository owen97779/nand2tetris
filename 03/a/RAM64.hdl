// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way (in=load, sel=address[3..5], a=sel1, b=sel2, c=sel3, d=sel4, e=sel5, f=sel6, g=sel7, h=sel8);

    RAM8 (in=in, load=sel1, address=address[0..2], out=r1);
    RAM8 (in=in, load=sel2, address=address[0..2], out=r2);
    RAM8 (in=in, load=sel3, address=address[0..2], out=r3);
    RAM8 (in=in, load=sel4, address=address[0..2], out=r4);
    RAM8 (in=in, load=sel5, address=address[0..2], out=r5);
    RAM8 (in=in, load=sel6, address=address[0..2], out=r6);
    RAM8 (in=in, load=sel7, address=address[0..2], out=r7);
    RAM8 (in=in, load=sel8, address=address[0..2], out=r8);

    Mux8Way16 (a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8, sel=address[3..5], out=out);

}